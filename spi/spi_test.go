package spi

import (
	"bytes"
	"testing"
)

type wtest struct {
	cfg Config
	in  []byte
	out []byte
}

func (wt *wtest) check(t *testing.T) {
	buf := bytes.NewBuffer(make([]byte, 0, len(wt.in)*16))
	spi := New(nil, buf, 0x01, 0x10, 0)
	spi.Configure(wt.cfg)
	spi.Write(wt.in)
	out := buf.Bytes()
	if bytes.Equal(wt.out, out) {
		return
	}
	t.Errorf("\nin=%#v\ngood=%#v\nout =%#v\n\n", wt.in, wt.out, out)
}

var wts = []wtest{
	{
		cfg: Config{MSBF | CPOL0 | CPHA0, 0, 0},
		in:  []byte{0x55, 0xaa},
		out: []byte{
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,

			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,
			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,
		},
	},
	{
		cfg: Config{MSBF | CPOL1 | CPHA1, 0, 0},
		in:  []byte{0x55, 0xaa},
		out: []byte{
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,

			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,
			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,
		},
	},
	{
		cfg: Config{LSBF | CPOL0 | CPHA0, 0, 0},
		in:  []byte{0xf0, 0x0f},
		out: []byte{
			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,

			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
		},
	},
	{
		cfg: Config{LSBF | CPOL1 | CPHA0, 0, 0},
		in:  []byte{0xf0, 0x0f},
		out: []byte{
			0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
			0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10,

			0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10,
			0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
		},
	},
	{
		cfg: Config{LSBF | CPOL0 | CPHA1, 0, 0},
		in:  []byte{0xf0, 0x0f},
		out: []byte{
			0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
			0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10,

			0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10,
			0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
		},
	},
	{
		cfg: Config{LSBF | CPOL1 | CPHA1, 0, 0},
		in:  []byte{0xf0, 0x0f},
		out: []byte{
			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,

			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
		},
	},
	{
		cfg: Config{MSBF | CPOL0 | CPHA0, 1, 1},
		in:  []byte{0x55, 0xaa, 0xf0, 0x0f},
		out: []byte{
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,

			0x00, 0x00,

			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,
			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,

			0x00, 0x00,

			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,

			0x00, 0x00,

			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
		},
	},
	{
		cfg: Config{MSBF | CPOL0 | CPHA0, 2, 2},
		in:  []byte{0x55, 0xaa, 0xf0, 0x0f},
		out: []byte{
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,
			0x00, 0x01, 0x10, 0x11, 0x00, 0x01, 0x10, 0x11,

			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,
			0x10, 0x11, 0x00, 0x01, 0x10, 0x11, 0x00, 0x01,

			0x00, 0x00, 0x00, 0x00,

			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,

			0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
			0x10, 0x11, 0x10, 0x11, 0x10, 0x11, 0x10, 0x11,
		},
	},
}

func TestWrite(t *testing.T) {
	for _, wt := range wts {
		wt.check(t)
	}
}
